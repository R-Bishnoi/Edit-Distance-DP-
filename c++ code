//memoization method 
/*
class Solution {
public:
    
 
int solve(vector<vector<int>>&dp,string s1,string s2,int i1,int i2){
    
 if(i1<0)return i2+1;
 if(i2<0)return i1+1;
    
    if(dp[i1][i2]!=-1)return dp[i1][i2];
    
if(s1[i1]==s2[i2])
    return dp[i1][i2]=solve(dp,s1,s2,i1-1,i2-1);

    
else
   return dp[i1][i2]=1+min(solve(dp,s1,s2,i1,i2-1),min(solve(dp,s1,s2,i1-1,i2),solve(dp,s1,s2,i1-1,i2-1)));

    
    
} 
    
    
 int minDistance(string s1, string s2) {
      
     int l1=s1.size();
     int l2=s2.size();
     
    vector<vector<int>>dp(l1,vector<int>(l2+1,-1));
     
     return solve(dp,s1,s2,l1-1,l2-1);
        
        
    }
    
    
    
};


*/









//tabulation method


/*

class Solution {
public:
       
 int minDistance(string s1, string s2) {
      
     int l1=s1.size();
     int l2=s2.size();
     
    vector<vector<int>>dp(l1+1,vector<int>(l2+1,0));
     
     
   for(int i=0;i<=l1;i++)dp[i][0]=i;
    for(int j=0;j<=l2;j++)dp[0][j]=j;
     

     for(int i=1;i<=l1;i++){
         for(int j=1;j<=l2;j++){
         
             if(s1[i-1]==s2[j-1])dp[i][j]=dp[i-1][j-1];
             
             else
                 dp[i][j]=1+min(dp[i-1][j-1],min(dp[i][j-1],dp[i-1][j]));
             
             
         }
     }
   
     
     
    return dp[l1][l2];       
        
    }
       
    
};


*/

